version: "3.8"

services:
  supertokens:
    image: registry.supertokens.io/supertokens/supertokens-postgresql:9.3.0
    container_name: sigma-supertokens
    environment:
      POSTGRESQL_CONNECTION_URI: ${SUPERTOKEN_DATABASE_URL}
      REFRESH_TOKEN_VALIDITY: 2592000 # 30 days in seconds
      ACCESS_TOKEN_VALIDITY: 2592000 # 30 days in seconds
      PASSWORD_RESET_TOKEN_LIFETIME: 86400
    ports:
      - 3567:3567
    networks:
      - sigma
    restart: unless-stopped

  redis:
    image: redis:alpine3.19
    container_name: sigma-redis
    networks:
      - sigma
    ports:
      - 6379:6379
    restart: unless-stopped

  server:
    image: "tegonhq/sigma-server:${VERSION}"
    container_name: sigma-server
    depends_on:
      - supertokens
      - redis
    restart: unless-stopped
    networks:
      - sigma
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - FRONTEND_HOST=${FRONTEND_HOST}
      - BACKEND_HOST=${BACKEND_HOST}
      - OAUTH_CALLBACK_URL=${OAUTH_CALLBACK_URL}
      - SUPERTOKEN_CONNECTION_URI=${SUPERTOKEN_CONNECTION_URI}
      - REPLICATION_DATABASE_URL=${REPLICATION_DATABASE_URL}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_SCHEMA=${DB_SCHEMA}
      - REDIS_URL=${REDIS_URL}
      - REDIS_PORT=${REDIS_PORT}
      - GCP_BUCKET_NAME=${GCP_BUCKET_NAME}
      - GCP_SERVICE_ACCOUNT_FILE=${GCP_SERVICE_ACCOUNT_FILE}
      - PUBLIC_ATTACHMENT_URL=${PUBLIC_ATTACHMENT_URL}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_GENERATIVE_AI_API_KEY=${GOOGLE_GENERATIVE_AI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}

    ports:
      - 5555:5555
      - 8001:3001
      - 8002:1234
    volumes:
      - ./certs:/app/apps/server/certs

  webapp:
    image: "tegonhq/sigma-webapp:${VERSION}"
    container_name: sigma-webapp
    restart: unless-stopped
    depends_on:
      - server
    networks:
      - sigma
    environment:
      - BACKEND_URL=${BACKEND_URL}
      - NEXT_PUBLIC_BASE_HOST=${NEXT_PUBLIC_BASE_HOST}
      - NEXT_PUBLIC_VERSION=${VERSION}
      - NEXT_PUBLIC_BACKEND_HOST=${NEXT_PUBLIC_BACKEND_HOST}
      - NEXT_PUBLIC_POSTHOG_KEY=${NEXT_PUBLIC_POSTHOG_KEY}
      - NEXT_PUBLIC_POSTHOG_HOST=${NEXT_PUBLIC_POSTHOG_HOST}
      - NEXT_PUBLIC_SENTRY_DSN=${NEXT_PUBLIC_SENTRY_DSN}
      - NEXT_PUBLIC_NODE_ENV=${NODE_ENV}
      - NEXT_PUBLIC_CONTENT_HOST=${NEXT_PUBLIC_CONTENT_HOST}
    ports:
      - 8000:3000

  triggerapp:
    image: ghcr.io/triggerdotdev/trigger.dev:v3
    container_name: sigma-triggerapp
    restart: unless-stopped
    environment:
      V3_ENABLED: "true"
      DATABASE_URL: ${TRIGGER_DATABASE_URL}
      DIRECT_URL: ${TRIGGER_DATABASE_URL}
      SESSION_SECRET: ${TRIGGER_TOKEN}
      MAGIC_LINK_SECRET: ${TRIGGER_TOKEN}
      ENCRYPTION_KEY: ${TRIGGER_TOKEN}
      REDIS_HOST: ${REDIS_URL}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_TLS_DISABLED: ${REDIS_TLS_DISABLED}
      PORT: ${TRIGGER_PORT}
      REMIX_APP_PORT: ${TRIGGER_PORT}
      NODE_ENV: ${NODE_ENV}
      APP_ENV: ${NODE_ENV}
      APP_ORIGIN: ${TRIGGER_API_URL}
      DEV_OTEL_EXPORTER_OTLP_ENDPOINT: ${TRIGGER_PROTOCOL:-http}://${TRIGGER_DOMAIN:-localhost:3030}/otel
      RUNTIME_PLATFORM: "docker-compose"
      DEPLOY_REGISTRY_HOST: docker.io
      DEPLOY_REGISTRY_NAMESPACE: tegonhq
      TRIGGER_PROTOCOL: ${TRIGGER_PROTOCOL}
      TRIGGER_DOMAIN: ${TRIGGER_DOMAIN}
      INTERNAL_OTEL_TRACE_LOGGING_ENABLED: false
      ELECTRIC_ORIGIN: http://sigma-electric:3000
      APP_LOG_LEVEL: ${APP_LOG_LEVEL}
    ports:
      - 3030:3030
    networks:
      - sigma

  docker-provider:
    image: ghcr.io/triggerdotdev/provider/docker:v3
    container_name: sigma-docker-provider
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    user: root
    networks:
      - sigma
    depends_on:
      - triggerapp
    ports:
      - 9021:8000
    environment:
      PLATFORM_HOST: sigma-triggerapp
      OTEL_EXPORTER_OTLP_ENDPOINT: ${TRIGGER_PROTOCOL:-http}://${TRIGGER_DOMAIN:-localhost:3030}/otel
      PLATFORM_WS_PORT: ${TRIGGER_PORT}
      HTTP_SERVER_PORT: 9020
      COORDINATOR_HOST: 127.0.0.1
      COORDINATOR_PORT: 9020
      SECURE_CONNECTION: "false"
      TRIGGER_PROTOCOL: ${TRIGGER_PROTOCOL}
      TRIGGER_DOMAIN: ${TRIGGER_DOMAIN}
      APP_LOG_LEVEL: ${APP_LOG_LEVEL}

  coordinator:
    image: ghcr.io/triggerdotdev/coordinator:v3
    container_name: sigma-coordinator
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    user: root
    networks:
      - sigma
    depends_on:
      - triggerapp
    ports:
      - 9020:9020
    environment:
      PLATFORM_HOST: sigma-triggerapp
      OTEL_EXPORTER_OTLP_ENDPOINT: ${TRIGGER_PROTOCOL:-http}://${TRIGGER_DOMAIN:-localhost:3030}/otel
      PLATFORM_WS_PORT: ${TRIGGER_PORT}
      HTTP_SERVER_PORT: 9020
      SECURE_CONNECTION: "false"
      TRIGGER_PROTOCOL: ${TRIGGER_PROTOCOL}
      TRIGGER_DOMAIN: ${TRIGGER_DOMAIN}
      APP_LOG_LEVEL: ${APP_LOG_LEVEL}

  electric:
    image: electricsql/electric:1.0.10
    container_name: sigma-electric
    restart: ${RESTART_POLICY:-unless-stopped}
    environment:
      DATABASE_URL: ${TRIGGER_DATABASE_URL}?sslmode=disable
      ELECTRIC_INSECURE: true
    networks:
      - sigma
    ports:
      - ${DOCKER_PUBLISH_IP:-127.0.0.1}:3061:3000

networks:
  app_network:
    driver: bridge
  sigma: {}
